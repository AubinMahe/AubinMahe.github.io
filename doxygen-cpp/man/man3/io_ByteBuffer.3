.TH "ByteBuffer" 3 "Sat Jan 9 2016" "Version 0.0.0" "dcrud" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ByteBuffer \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ByteBuffer\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBByteBuffer\fP (unsigned int capacity, byte *\fBarray\fP=0)"
.br
.ti -1c
.RI "\fB~ByteBuffer\fP ()"
.br
.ti -1c
.RI "\fBByteBuffer\fP * \fBcopy\fP (unsigned int length) const "
.br
.ti -1c
.RI "void \fBclear\fP (void)"
.br
.ti -1c
.RI "void \fBmark\fP (void)"
.br
.ti -1c
.RI "void \fBreset\fP (void)"
.br
.ti -1c
.RI "void \fBflip\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBposition\fP (void) const "
.br
.ti -1c
.RI "void \fBposition\fP (unsigned int position)"
.br
.ti -1c
.RI "unsigned int \fBlimit\fP (void) const "
.br
.ti -1c
.RI "unsigned int \fBremaining\fP (void) const "
.br
.ti -1c
.RI "void \fBput\fP (const byte *src, unsigned int from, unsigned int to)"
.br
.ti -1c
.RI "void \fBget\fP (byte *target, unsigned int from, unsigned int to)"
.br
.ti -1c
.RI "void \fBputByte\fP (byte value)"
.br
.ti -1c
.RI "byte \fBgetByte\fP (void)"
.br
.ti -1c
.RI "void \fBputBoolean\fP (bool value)"
.br
.ti -1c
.RI "bool \fBgetBoolean\fP (void)"
.br
.ti -1c
.RI "void \fBputShort\fP (unsigned short value)"
.br
.ti -1c
.RI "unsigned short \fBgetShort\fP (void)"
.br
.ti -1c
.RI "void \fBputInt\fP (unsigned int value)"
.br
.ti -1c
.RI "void \fBputIntAt\fP (unsigned int value, unsigned int index)"
.br
.ti -1c
.RI "unsigned int \fBgetInt\fP (void)"
.br
.ti -1c
.RI "void \fBputLong\fP (uint64_t value)"
.br
.ti -1c
.RI "uint64_t \fBgetLong\fP (void)"
.br
.ti -1c
.RI "void \fBputFloat\fP (float value)"
.br
.ti -1c
.RI "float \fBgetFloat\fP (void)"
.br
.ti -1c
.RI "void \fBputDouble\fP (double value)"
.br
.ti -1c
.RI "double \fBgetDouble\fP (void)"
.br
.ti -1c
.RI "void \fBputString\fP (const char *value)"
.br
.ti -1c
.RI "void \fBgetString\fP (char *target, unsigned int sizeOfTarget)"
.br
.ti -1c
.RI "void \fBputString\fP (const std::string &value)"
.br
.ti -1c
.RI "std::string \fBgetString\fP ()"
.br
.ti -1c
.RI "void \fBput\fP (\fBByteBuffer\fP &source)"
.br
.ti -1c
.RI "void \fBsend\fP (SOCKET sckt, struct sockaddr_in &target)"
.br
.ti -1c
.RI "bool \fBreceive\fP (SOCKET sckt)"
.br
.ti -1c
.RI "byte * \fBarray\fP (void)"
.br
.ti -1c
.RI "void \fBdump\fP (FILE *target) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 20 of file ByteBuffer\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBByteBuffer\fP (unsigned intcapacity, byte *array = \fC0\fP)\fC [inline]\fP"

.PP
Definition at line 31 of file ByteBuffer\&.hpp\&.
.PP
.nf
31                                                             {
32          if( array ) {
33             _buffer = ioByteBuffer_wrap( capacity, array );
34          }
35          else {
36             _buffer = ioByteBuffer_new( capacity );
37          }
38       }
.fi
.SS "~\fBByteBuffer\fP ()\fC [inline]\fP"

.PP
Definition at line 40 of file ByteBuffer\&.hpp\&.
.PP
.nf
40                      {
41          ioByteBuffer_delete( &_buffer );
42       }
.fi
.SH "Member Function Documentation"
.PP 
.SS "byte* array (void)\fC [inline]\fP"

.PP
Definition at line 195 of file ByteBuffer\&.hpp\&.
.PP
.nf
195                            {
196          return ioByteBuffer_array( _buffer );
197       }
.fi
.SS "void clear (void)\fC [inline]\fP"

.PP
Definition at line 48 of file ByteBuffer\&.hpp\&.
.PP
.nf
48                          {
49          ioByteBuffer_clear( _buffer );
50       }
.fi
.SS "\fBByteBuffer\fP* copy (unsigned intlength) const\fC [inline]\fP"

.PP
Definition at line 44 of file ByteBuffer\&.hpp\&.
.PP
.nf
44                                                      {
45          return new io::ByteBuffer( ioByteBuffer_copy( _buffer, length ));
46       }
.fi
.SS "void dump (FILE *target) const\fC [inline]\fP"

.PP
Definition at line 199 of file ByteBuffer\&.hpp\&.
.PP
.nf
199                                        {
200          ioByteBuffer_dump( _buffer, target );
201       }
.fi
.SS "void flip (void)\fC [inline]\fP"

.PP
Definition at line 60 of file ByteBuffer\&.hpp\&.
.PP
.nf
60                         {
61          ioByteBuffer_flip( _buffer );
62       }
.fi
.SS "void get (byte *target, unsigned intfrom, unsigned intto)\fC [inline]\fP"

.PP
Definition at line 84 of file ByteBuffer\&.hpp\&.
.PP
.nf
84                                                                     {
85          ioByteBuffer_get( _buffer, target, from, to );
86       }
.fi
.SS "bool getBoolean (void)\fC [inline]\fP"

.PP
Definition at line 102 of file ByteBuffer\&.hpp\&.
.PP
.nf
102                               {
103          byte value = 0;
104          ioByteBuffer_getByte( _buffer, &value );
105          return value != 0;
106       }
.fi
.SS "byte getByte (void)\fC [inline]\fP"

.PP
Definition at line 92 of file ByteBuffer\&.hpp\&.
.PP
.nf
92                            {
93          byte value = 0;
94          ioByteBuffer_getByte( _buffer, &value );
95          return value;
96       }
.fi
.SS "double getDouble (void)\fC [inline]\fP"

.PP
Definition at line 156 of file ByteBuffer\&.hpp\&.
.PP
.nf
156                                {
157          double value = NAN;
158          if( ioByteBuffer_getDouble( _buffer, &value )) {
159             return value;
160          }
161          return NAN;
162       }
.fi
.SS "float getFloat (void)\fC [inline]\fP"

.PP
Definition at line 146 of file ByteBuffer\&.hpp\&.
.PP
.nf
146                              {
147          float value = 0\&.0f;
148          ioByteBuffer_getFloat( _buffer, &value );
149          return value;
150       }
.fi
.SS "unsigned int getInt (void)\fC [inline]\fP"

.PP
Definition at line 126 of file ByteBuffer\&.hpp\&.
.PP
.nf
126                                   {
127          unsigned int value = 0;
128          ioByteBuffer_getInt( _buffer, &value );
129          return value;
130       }
.fi
.SS "uint64_t getLong (void)\fC [inline]\fP"

.PP
Definition at line 136 of file ByteBuffer\&.hpp\&.
.PP
.nf
136                                {
137          uint64_t value = 0;
138          ioByteBuffer_getLong( _buffer, &value );
139          return value;
140       }
.fi
.SS "unsigned short getShort (void)\fC [inline]\fP"

.PP
Definition at line 112 of file ByteBuffer\&.hpp\&.
.PP
.nf
112                                       {
113          unsigned short value = 0;
114          ioByteBuffer_getShort( _buffer, &value );
115          return value;
116       }
.fi
.SS "void getString (char *target, unsigned intsizeOfTarget)\fC [inline]\fP"

.PP
Definition at line 168 of file ByteBuffer\&.hpp\&.
.PP
.nf
168                                                                  {
169          ioByteBuffer_getString( _buffer, target, sizeOfTarget );
170       }
.fi
.SS "std::string getString ()\fC [inline]\fP"

.PP
Definition at line 176 of file ByteBuffer\&.hpp\&.
.PP
.nf
176                             {
177          static const unsigned sizeOfTarget = 64*1024;
178          char target[sizeOfTarget];
179          ioByteBuffer_getString( _buffer, target, sizeOfTarget );
180          return std::string( target );
181       }
.fi
.SS "unsigned int limit (void) const\fC [inline]\fP"

.PP
Definition at line 72 of file ByteBuffer\&.hpp\&.
.PP
.nf
72                                        {
73          return ioByteBuffer_getLimit( _buffer );
74       }
.fi
.SS "void mark (void)\fC [inline]\fP"

.PP
Definition at line 52 of file ByteBuffer\&.hpp\&.
.PP
.nf
52                         {
53          ioByteBuffer_mark( _buffer );
54       }
.fi
.SS "unsigned int position (void) const\fC [inline]\fP"

.PP
Definition at line 64 of file ByteBuffer\&.hpp\&.
.PP
.nf
64                                           {
65          return ioByteBuffer_getPosition( _buffer );
66       }
.fi
.SS "void position (unsigned intposition)\fC [inline]\fP"

.PP
Definition at line 68 of file ByteBuffer\&.hpp\&.
.PP
.nf
68                                              {
69          ioByteBuffer_setPosition( _buffer, position );
70       }
.fi
.SS "void put (const byte *src, unsigned intfrom, unsigned intto)\fC [inline]\fP"

.PP
Definition at line 80 of file ByteBuffer\&.hpp\&.
.PP
.nf
80                                                                        {
81          ioByteBuffer_put( _buffer, src, from, to );
82       }
.fi
.SS "void put (\fBByteBuffer\fP &source)\fC [inline]\fP"

.PP
Definition at line 183 of file ByteBuffer\&.hpp\&.
.PP
.nf
183                                       {
184          ioByteBuffer_putBuffer( _buffer, source\&._buffer );
185       }
.fi
.SS "void putBoolean (boolvalue)\fC [inline]\fP"

.PP
Definition at line 98 of file ByteBuffer\&.hpp\&.
.PP
.nf
98                                     {
99          ioByteBuffer_putByte( _buffer, value ? 1 : 0 );
100       };
.fi
.SS "void putByte (bytevalue)\fC [inline]\fP"

.PP
Definition at line 88 of file ByteBuffer\&.hpp\&.
.PP
.nf
88                                  {
89          ioByteBuffer_putByte( _buffer, value );
90       }
.fi
.SS "void putDouble (doublevalue)\fC [inline]\fP"

.PP
Definition at line 152 of file ByteBuffer\&.hpp\&.
.PP
.nf
152                                      {
153          ioByteBuffer_putDouble( _buffer, value );
154       }
.fi
.SS "void putFloat (floatvalue)\fC [inline]\fP"

.PP
Definition at line 142 of file ByteBuffer\&.hpp\&.
.PP
.nf
142                                    {
143          ioByteBuffer_putFloat( _buffer, value );
144       }
.fi
.SS "void putInt (unsigned intvalue)\fC [inline]\fP"

.PP
Definition at line 118 of file ByteBuffer\&.hpp\&.
.PP
.nf
118                                         {
119          ioByteBuffer_putInt( _buffer, value );
120       }
.fi
.SS "void putIntAt (unsigned intvalue, unsigned intindex)\fC [inline]\fP"

.PP
Definition at line 122 of file ByteBuffer\&.hpp\&.
.PP
.nf
122                                                               {
123          ioByteBuffer_putIntAt( _buffer, value, index );
124       }
.fi
.SS "void putLong (uint64_tvalue)\fC [inline]\fP"

.PP
Definition at line 132 of file ByteBuffer\&.hpp\&.
.PP
.nf
132                                      {
133          ioByteBuffer_putLong( _buffer, value );
134       }
.fi
.SS "void putShort (unsigned shortvalue)\fC [inline]\fP"

.PP
Definition at line 108 of file ByteBuffer\&.hpp\&.
.PP
.nf
108                                             {
109          ioByteBuffer_putShort( _buffer, value );
110       }
.fi
.SS "void putString (const char *value)\fC [inline]\fP"

.PP
Definition at line 164 of file ByteBuffer\&.hpp\&.
.PP
.nf
164                                            {
165          ioByteBuffer_putString( _buffer, value );
166       }
.fi
.SS "void putString (const std::string &value)\fC [inline]\fP"

.PP
Definition at line 172 of file ByteBuffer\&.hpp\&.
.PP
.nf
172                                                 {
173          ioByteBuffer_putString( _buffer, value\&.c_str());
174       }
.fi
.SS "bool receive (SOCKETsckt)\fC [inline]\fP"

.PP
Definition at line 191 of file ByteBuffer\&.hpp\&.
.PP
.nf
191                                   {
192          return ioByteBuffer_receive( _buffer, sckt ) == IO_STATUS_NO_ERROR;
193       }
.fi
.SS "unsigned int remaining (void) const\fC [inline]\fP"

.PP
Definition at line 76 of file ByteBuffer\&.hpp\&.
.PP
.nf
76                                            {
77          return ioByteBuffer_remaining( _buffer );
78       }
.fi
.SS "void reset (void)\fC [inline]\fP"

.PP
Definition at line 56 of file ByteBuffer\&.hpp\&.
.PP
.nf
56                          {
57          ioByteBuffer_reset( _buffer );
58       }
.fi
.SS "void send (SOCKETsckt, struct sockaddr_in &target)\fC [inline]\fP"

.PP
Definition at line 187 of file ByteBuffer\&.hpp\&.
.PP
.nf
187                                                             {
188          ioByteBuffer_send( _buffer, sckt, &target );
189       }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for dcrud from the source code\&.
